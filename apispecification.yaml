openapi: 3.0.0
info:
  title: Kanban Board
  description: >
    
    <div>In this assignment, you have to create a RESTful API, database models using Flask-RESTful  and     flask-SQLAlchemy. We list below instructions to be followed in 
    preparing and submitting the solution.
    <h3>General instructions:</h3>
    <ol> 
      <li> Submit a single .zip file containing all your submission files and folders, the name of which should be "roll_number.zip". E.g.: 21f1000000.zip </li>
      <li>The folder structure inside the zip file should be as follows:</li>
      <ol type = "I">
        <li>The Python program must be written inside a file named "app.py". This file must reside inside the root folder.</li>
        <li> The database file named "api_database.sqlite3". You are not required to submit this database file with your submission.</li>
      </ol>
    <li> You should not keep any code inside the scope of the condition " if __name__ == '__main__' " except run() call. </li>
    <li> Allowed Python packages: flask, flask-sqlalchemy, flask-restful, and any standard Python3 package.</li>
    <li> The database URI must be the same as: app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///api_database.sqlite3'.</li>
    <li> You should not use create_all() call in your program to create a database.</li>
    </ol>
    </div>

    <h3> User Table Schema </h3> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>UserID</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>Username</td>
        <td>String</td>
        <td>Unique Not Null</td>
      </tr>
      <tr>
        <td>EmailID</td>
        <td>String</td>
        <td></td>
      </tr>      
      <tr>
        <td>Password</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>         
    </tbody>
    </table>

    <h3> List Table Schema </h3> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>ListID</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>UserID</td>
        <td>Integer</td>
        <td>Foreign Key (User.UserID), Not Null</td>
      </tr>
      <tr>
        <td>Name</td>
        <td>String</td>
        <td>Not Null</td>
      </tr> 
      <tr>
        <td>Description</td>
        <td>String</td>
        <td></td>
      </tr>  
      <tr>
        <td>Created_time</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>    
    </tbody>
    </table>


    <h3> Card Table Schema </h3> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>CardID</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>ListID</td>
        <td>Integer</td>
        <td>Foreign Key (List.ListID), Not Null</td>
      </tr>
      <tr>
        <td>UserID</td>
        <td>Integer</td>
        <td>Foreign Key (User.UserID), Not Null</td>
      </tr>
      <tr>
        <td>Title</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>Content</td>
        <td>String</td>
        <td></td>
      </tr>
      <tr>
        <td>Deadline</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>Complete</td>
        <td>Integer</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>Created_time</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>Last_updated_time</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>Completed_time</td>
        <td>String</td>
        <td></td>
      </tr>
    </tbody>
    </table>

    <h3> Error Codes </h3> 
    <table>
      <thead>
        <th>Resource</th>
        <th>Error Code</th>
        <th>Message</th>
      </thead>
      <tbody>
      <tr>
        <td>User</td>
        <td>USER001</td>
        <td>UserID is required and should be an integer.</td>
      </tr>
      <tr>
        <td>User</td>
        <td>USER002</td>
        <td>Username is required and should be a string.</td>
      </tr>
      <tr>
        <td>User</td>
        <td>USER003</td>
        <td>EmailID is required and should be a string.</td>
      </tr>
      <tr>
        <td>User</td>
        <td>USER004</td>
        <td>Password is required and should be a string.</td>
      </tr>
      <tr>
        <td>List</td>
        <td>LIST001</td>
        <td>ListID is required and should be an integer.</td>
      </tr>
      <tr>
        <td>List</td>
        <td>LIST002</td>
        <td>UserID is required and should be an integer.</td>
      </tr>
      <tr>
        <td>List</td>
        <td>LIST003</td>
        <td>Name is required and should be a string.</td>
      </tr>
      <tr>
        <td>List</td>
        <td>LIST004</td>
        <td>Description should be a string.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD001</td>
        <td>CardID is required and should be an integer.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD002</td>
        <td>ListID is required and should be an integer.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD003</td>
        <td>Title is required and should be a string.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD004</td>
        <td>Content should be a string.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD005</td>
        <td>Deadline is required and should be a string.</td>
      </tr>
      <tr>
        <td>Card</td>
        <td>CARD006</td>
        <td>Complete is required and should be an integer having value 0 or 1.</td>
      </tr>
    </tbody>
    </table>

  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080/
paths:
  /api/user/{UserID}:
    description: End point to read, update and delete a course resource with UserID = UserID.
    get:
      description: Operation to Read user resource.
      parameters:
        - in: path
          name: UserID
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  UserID:
                    type: integer
                    example: 201
                  Username:
                    type: string
                    example: John
                  EmailID:
                    type: string
                    example: john01@example.com
                  Password:
                    type: string
                    example: pass
        '500':
          description: Internal Server Error
        '404':
          description: User not found

    put:
      description: Operation to update the user resource.
      parameters:
        - in: path
          name: UserID
          required: true
          schema:
            type: integer
            example: 201
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                EmailID:
                  type: string
                  example: john02@example.com
                Password:
                  type: string
                  example: pass2
      responses:
        '200':
          description: Successfuly updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserID:
                    type: integer
                    example: 201
                  Username:
                    type: string
                    example: John
                  EmailID:
                    type: string
                    example: john02@example.com
                  Password:
                    type: string
                    example: pass2
        '404':
          description: User not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the user resource
      parameters:
        - in: path
          name: UserID
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Successfully Deleted
        '404':
          description: User not found
        '500':
          description: Intenal Server Error

  /api/user:
    description: End point to create user resource
    post:
      description: Operation to create the user resource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Username:
                  type: string
                  example: John
                EmailID:
                  type: string
                  example: john01@example.com
                Password:
                  type: string
                  example: pass
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserID:
                    type: integer
                    example: 201
                  Username:
                    type: string
                    example: John
                  EmailID:
                    type: string
                    example: john01@example.com
                  Password:
                    type: string
                    example: pass
        '500':
          description: Internal Server Error
        '409':
          description: Username already exists
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
  /api/list/{ListID}:
    description: Url to read, update and delete the list resource.
    get:
      description: Operation to read list resource
      parameters:
        - in: path
          name: ListID
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                title: list object
                type: object
                properties:
                  ListID:
                    type: integer
                    example: 101
                  UserID:
                    type: integer
                    example: 201
                  Name:
                    type: string
                    example: To-do
                  Description:
                    type: string
                    example: List of things to do
                  Created_time:
                    type: string
                    example: 17/07/2022
        '500':
          description: Internal server error
        '404':
          description: List not found

    put:
      description: Operation to update the list resource
      parameters:
        - in: path
          name: ListID
          required: true
          schema:
            type: integer
            example: 101
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: To-do
                Description:
                  type: string
                  example: To-do list
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ListID:
                    type: integer
                    example: 101
                  UserID:
                    type: integer
                    example: 201
                  Name:
                    type: string
                    example: To-do
                  Description:
                    type: string
                    example: To-do list
                  Created_time:
                    type: string
                    example: 17/07/2022
        '404':
          description: List not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the list resource
      parameters:
        - in: path
          name: ListID
          required: true
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Successfully Deleted
        '500':
          description: Internal Server Error
        '404':
          description: List not found

  /api/list:
    description: Url to create list resource
    post:
      description: Operation to create the list resource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  example: 25
                Name:
                  type: string
                  example: To-do
                Description:
                  type: string
                  example: To-do list description
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                title: list object
                type: object
                properties:
                  ListID:
                    type: integer
                    example: 101
                  UserID:
                    type: integer
                    example: 201
                  Name:
                    type: string
                    example: To-do
                  Description:
                    type: string
                    example: To-do list description
                  Created_time:
                    type: string
                    example: 17/07/2022
        '500':
          description: Internal Server Error
        '404':
          description: UserID not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
  /api/card/{CardID}:
    description: Url to read, update and delete the Card resource.
    get:
      description: Operation to read Card resource
      parameters:
        - in: path
          name: CardID
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Request Successful
          content:
            application/json:
              schema:
                title: card object
                type: object
                properties:
                  CardID:
                    type: integer
                    example: 101
                  ListID:
                    type: integer
                    example: 201
                  UserID:
                    type: integer
                    example: 301
                  Title:
                    type: string
                    example: Assignment
                  Content:
                    type: string
                    example: Week 12 Assignment Submission
                  Deadline:
                    type: string
                    example: 17/09/2022
                  Complete:
                    type: integer
                    example: 1
                  Created_time:
                    type: string
                    example: 17/07/2022
                  Last_updated_time:
                    type: string
                    example: 17/07/2022
                  Completed_time:
                    type: string
                    example: 17/07/2022
        '500':
          description: Internal server error
        '404':
          description: Card not found

    put:
      description: Operation to update the card resource
      parameters:
        - in: path
          name: CardID
          required: true
          schema:
            type: integer
            example: 101
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ListID:
                  type: integer
                  example: 13
                Title:
                  type: string
                  example: Assignement
                Content:
                  type: string
                  example: Week 12 Assignment Submission
                Deadline:
                    type: string
                    example: 17/09/2022
                Complete:
                    type: integer
                    example: 1
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  CardID:
                    type: integer
                    example: 101
                  ListID:
                    type: integer
                    example: 201
                  UserID:
                    type: integer
                    example: 301
                  Title:
                    type: string
                    example: Assignment
                  Content:
                    type: string
                    example: Week 12 Assignment Submission
                  Deadline:
                    type: string
                    example: 17/09/2022
                  Complete:
                    type: integer
                    example: 1
                  Created_time:
                    type: string
                    example: 17/07/2022
                  Last_updated_time:
                    type: string
                    example: 17/07/2022
                  Completed_time:
                    type: string
                    example: 17/07/2022
        '404':
          description: Card/List not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the card resource
      parameters:
        - in: path
          name: CardID
          required: true
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Successfully Deleted
        '500':
          description: Internal Server Error
        '404':
          description: Card not found

  /api/card:
    description: Url to create card resource
    post:
      description: Operation to create the card resource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ListID:
                  type: integer
                  example: 13
                Title:
                  type: string
                  example: Assignemnt
                Content:
                  type: string
                  example: Week 12 Assignment Submission
                Deadline:
                    type: string
                    example: 17/09/2022
                Complete:
                    type: integer
                    example: 1
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                title: list object
                type: object
                properties:
                  CardID:
                    type: integer
                    example: 101
                  ListID:
                    type: integer
                    example: 201
                  UserID:
                    type: integer
                    example: 301
                  Title:
                    type: string
                    example: Assignment
                  Content:
                    type: string
                    example: Week 12 Assignment Submission
                  Deadline:
                    type: string
                    example: 17/09/2022
                  Complete:
                    type: integer
                    example: 1
                  Created_time:
                    type: string
                    example: 17/07/2022
                  Last_updated_time:
                    type: string
                    example: 17/07/2022
                  Completed_time:
                    type: string
                    example: 17/07/2022
        '500':
          description: Internal Server Error
        '404':
          description: ListID not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
  
